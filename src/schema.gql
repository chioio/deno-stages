# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  email: String!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String!
  roles: [UserRole!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  ROOT
  ADMIN
  USER
  type
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ExistedCheckOutput {
  result: Boolean!
}

type UserProfileOutput {
  username: String!
  firstName: String!
  lastName: String!
  avatar: String!
  roles: [UserRole!]!
}

type SignInOutput {
  token: String!
  profile: UserProfileOutput!
}

type SignOutOutput {
  msg: String!
}

type SignUpOutput {
  user: String!
}

type CreationCode {
  html: String!
  css: String!
  javascript: String!
}

type Creation {
  _id: String!
  title: String!
  author: String!
  code: CreationCode!
  stars: Float!
  comments: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Starer {
  title: String!
  username: String!
  avatar: String!
}

type Star {
  _id: String!
  user: Starer!
  creationId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PageData {
  count: Float!
  limit: Float!
  offset: Float!
}

type CreationsOutput {
  page: CreationConnection!
  pageData: PageData
}

type CreationConnection {
  edges: [CreationEdge!]
  pageInfo: CreationPageInfo
}

type CreationEdge {
  cursor: String
  node: Creation
}

type CreationPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Commenter {
  title: String!
  username: String!
  avatar: String!
}

type Comment {
  _id: String!
  creationId: String!
  commenter: Commenter!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Follow {
  _id: String!
  username: String!
  following: String!
}

type FollowsOutput {
  page: FollowConnection!
  pageData: PageData
}

type FollowConnection {
  edges: [FollowEdge!]
  pageInfo: FollowPageInfo
}

type FollowEdge {
  cursor: String
  node: Follow
}

type FollowPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Pin {
  _id: String!
  username: String!
  creationIds: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Readme {
  _id: String!
  user: String!
  content: String!
}

type Query {
  users: [User!]!
  user(username: String!): User!
  whoAmI: User!
  existedCheck(input: ExistedCheckInput!): ExistedCheckOutput!
  creations(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): CreationsOutput!
  creation(_id: String!): Creation
  star(username: String!, creationId: String!): Star
  stars(username: String, creationId: String): [Star!]!
  comments(creationId: String!): [Comment!]!
  comment(id: Int!): Comment!
  follow(following: String!, username: String!): Follow
  follows(
    following: String
    username: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): FollowsOutput!
  pin(username: String!): Pin!
  readme(username: String!): Readme
}

input ExistedCheckInput {
  type: AccountType!
  value: String!
}

enum AccountType {
  USERNAME
  EMAIL
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  signIn(input: SignInInput!): SignInOutput!
  signOut: SignOutOutput!
  signUp(input: SignUpInput!): SignUpOutput!
  createCreation(input: CreateCreationInput!): Creation!
  updateCreation(input: UpdateCreationInput!): Boolean!
  removeCreation(_id: String!): Boolean!
  createStar(createStarInput: CreateStarInput!): Star!
  removeStar(_id: String!): Boolean!
  cancelStar(username: String!, creationId: String!): Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: String!): Comment!
  createFollow(following: String!, username: String!): Follow!
  removeFollow(following: String!, username: String!): Boolean!
  updatePin(pined: Boolean!, creationId: String!, username: String!): Boolean!
  updateReadme(content: String, username: String!): Readme!
  removeReadme(username: String!): Readme!
}

input CreateUserInput {
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String!
}

input UpdateUserInput {
  username: String
  password: String
  firstName: String
  lastName: String
  avatar: String
  id: Int!
}

input SignInInput {
  account: String!
  password: String!
  type: String!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
}

input CreateCreationInput {
  title: String = "Untitled"
  author: String!
  code: CreateCodeInput
}

input CreateCodeInput {
  html: String
  css: String
  javascript: String
}

input UpdateCreationInput {
  _id: String!
  title: String = "Untitled"
  author: String!
  code: UpdateCodeInput
}

input UpdateCodeInput {
  html: String
  css: String
  javascript: String
}

input CreateStarInput {
  username: String!
  creationId: String!
}

input CreateCommentInput {
  creationId: String!
  commenter: String!
  content: String!
}

input UpdateCommentInput {
  creationId: String
  commenter: String
  content: String
  id: Int!
}
